// Initialize mutation rate, types, and genomic elements
initialize() {
	initializeSLiMOptions(keepPedigrees = T); // Allows us to access the relatedness() method
	initializeMutationRate(1.8e-7); // Mutation rate
	initializeMutationType("m1", 0.5, "f", 0.0); // Neutral mutation
	initializeMutationType("m2", 0.5, "f", -0.1); // Deleterious mutation
	initializeMutationType("m3", 0.5, "f", 0.1); // Beneficial mutation
	initializeGenomicElementType("g1", c(m1), 1.0); // Intron
	initializeGenomicElementType("g2", c(m1, m2, m3), c(0.7, 0.2, 0.05));
	initializeGenomicElement(g1, 0, 29999);  // Intron, 40 kB
	initializeGenomicElement(g2, 30000, 69999); // Exon, 20 kB
	initializeGenomicElement(g1, 70000, 99999); // Intron, 40kB
	initializeRecombinationRate(4e-8);   // Recombination rate
	initializeSex("A"); // Initialize sex on autosome chromosome
}

function (lifso)countSharedMuts(lifso ind1, lifso ind2) {
	// Function to count matching mutations
	muts1 = unique(ind1.genomes.positionsOfMutationsOfType(m2)); // Retrieve deleterious mutations for both individuals
	muts2 = unique(ind2.genomes.positionsOfMutationsOfType(m2));
	shared_count = 0; // Counting
	for (mut in muts1) {
		for (pos in muts2){
			if (mut == pos){
				shared_count = shared_count + 1;
				//cat("Match: " + mut + "\n"); // Print the matching positions
			}
		}
	}
	return shared_count;
}

1 early() {
	// Create a subpopulation of 1000 individuals
	sim.addSubpop("p1", 1000);  // Ensure you're working with 1000 individuals
}

1000: mateChoice() {
	do {
		mate = sample(p1.individuals, 1, T, weights);
		sharedMutCount = countSharedMuts(individual, mate);
		
		// If sharedMutCount is greater than 1, search for a new mate
		if (sharedMutCount != 0) {
			cat("Shared mutations = " + sharedMutCount + ". Finding a new mate.\n");
		}
	} while (individual.relatedness(mate) != 0 | sharedMutCount > 1);  // Ensure relatedness is 0 and sharedMutCount <= 1
	
	return mate;
}


5000 late() {
	// Print mean heterozygosity across the population
	heterozygosity = calcHeterozygosity(p1.genomes);
	cat("Mean heterozygosity = " + heterozygosity + "\n");
}
