// slim  -d TotalLength=1000000 -d runID=$i -d NBurn=10000 burnin.slim

// set up a simple neutral simulation
initialize() {
	initializeSLiMOptions(keepPedigrees = T);
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0); // neutral
	initializeMutationType("m2", 0.5, "e", 0.05); // beneficial
	initializeMutationType("m3", 0.1, "g", -0.1, 0.2); // deleterious
	initializeSex("A");
	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElementType("g2", c(m1, m2, m3), c(0.67,0.03,0.3));
	
	initializeRecombinationRate(1e-8);
	
	
	
	
	// Define the genome length
	//	TotalLength = 1000000; // Uncomment if not given as an argument in the terminal
	
	// Create exons (70% of the genome) and introns (30% of the genome)
	// Ensure exon-intron alternation
	genomicElementStart = 0;
	exonSize = asInteger(TotalLength * 0.7);  // Total exon size
	intronSize = asInteger(TotalLength * 0.3); // Total intron size
	nExons= asInteger(TotalLength * 1e-4);
	
	exonLength = asInteger(exonSize / nExons);   // Divide into n exons
	intronLength = asInteger(intronSize / nExons); // Divide into n introns
	
	for (i in 0:(nExons-1)) {
		// Define an exon
		initializeGenomicElement(g2, genomicElementStart, genomicElementStart + intronLength - 1);
		genomicElementStart = genomicElementStart + intronLength;
		
		// Define an intron if there's space
		if (genomicElementStart + intronLength - 1 < TotalLength) {
			initializeGenomicElement(g1, genomicElementStart, asInteger(genomicElementStart + exonLength - 1));
			genomicElementStart = genomicElementStart + exonLength;
		}
	}
}

// create a population of 500 individuals
1 early() {
	sim.addSubpop("p1", 500);
}


NBurn late() {
	sim.outputFull("0_Data/"+ "Burnin_" + NBurn + "n_" + runID + ".txt", pedigreeIDs = T);
	sim.simulationFinished();
}
