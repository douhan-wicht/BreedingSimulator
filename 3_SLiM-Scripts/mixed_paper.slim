// set up a simple neutral simulation
initialize() {
	initializeSLiMOptions(keepPedigrees = T);
	defineConstant("MPrs",20); // defines number of mating pairs
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0); // neutral
	initializeMutationType("m2", 0.5, "e", 0.05); // beneficial
	initializeMutationType("m3", 0.1, "g", -0.1, 0.2); // deleterious
	initializeSex("A");
	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElementType("g2", c(m1, m2, m3), c(0.67,0.03,0.3));
	
	// Uncomment if not used as a parameter in the terminal	
	//	NBurn=10000;
	
	initializeRecombinationRate(1e-8);
	
	// Uncomment if not used as a parameter in the terminal
	//	TotalLength = 1000000;
	
	// Create exons (70% of the genome) and introns (30% of the genome) and insure alternation
	genomicElementStart = 0;
	exonSize = asInteger(TotalLength * 0.7);  // Total exon size
	intronSize = asInteger(TotalLength * 0.3); // Total intron size
	nExons= asInteger(TotalLength * 1e-4);
	
	exonLength = asInteger(exonSize / nExons);   // Divide into n exons
	intronLength = asInteger(intronSize / nExons); // Divide into n introns
	
	for (i in 0:(nExons-1)) {
		// Define an exon
		initializeGenomicElement(g2, genomicElementStart, genomicElementStart + intronLength - 1);
		genomicElementStart = genomicElementStart + intronLength;
		
		// Define an intron if there's space
		if (genomicElementStart + intronLength - 1 < TotalLength) {
			initializeGenomicElement(g1, genomicElementStart, asInteger(genomicElementStart + exonLength - 1));
			genomicElementStart = genomicElementStart + exonLength;
		}
	}
}

// Function that calculates genetic load and fitness from individuals
function (s) getPopSumm(o pop, i sampleSize) {
	
	Pop_size = pop.individualCount;
	if (Pop_size < sampleSize) {    // If the sampleSize is bigger than the size of the population, sampleSize becomes the population size
		sampleSize = Pop_size;
	}
	mNeutral=sim.mutationTypes[sim.mutationTypes.id==1]; // identifies neutral mutations in the simulation (m1)
	i=pop.sampleIndividuals(sampleSize); // samples individuals from the population
	indvCount=length(i);		// returns the length of sampled individuals
	m = i.uniqueMutations;   // obtains the mutations from the sampled individuals
	m_uniq = unique(m);		// obtains the mutations that are unique
	m_uniq=m_uniq[m_uniq.mutationType!=mNeutral];  // removes the neutral mutations
	Mutcount=length(m_uniq);   // counts the unique mutations
	freqMut=sim.mutationFrequencies(pop,m_uniq);   // returns the frequencies of the unique mutations within the population
	ScoefMut=abs(m_uniq.selectionCoeff);   // returns the selection coefficients of the mutations 
	DcoefMut=m_uniq.mutationType.dominanceCoeff; // returns the dominance coefficients of the mutations 
	totalLoad=sum(freqMut*ScoefMut);  // calculates the genetic load by summing the multiplication of the frequenies by the selection coefficients
	relzLoad_homo=sum(freqMut^2*ScoefMut); // calculates the homozygous realised load by summing the multiplication of the frequenies squared by the selection coefficients
	relzLoad_hetero=2*sum(freqMut*(1-freqMut)*ScoefMut*DcoefMut); // calculates the heterozygous realised load by summing the multiplication of the frequenies by by 1-frequencies and by the selection coefficients and by the dominance coefficients
	relzLoad=sum(freqMut^2*ScoefMut)+ (2*sum(freqMut*(1-freqMut)*ScoefMut*DcoefMut)); // calculates the realised load by adding to the homozygous realised load to the heterozygous realised load
	mskLoad=sum(freqMut*ScoefMut) - sum(freqMut^2*ScoefMut) - (2*sum(freqMut*(1-freqMut)*ScoefMut*DcoefMut)); // calculates the masked load by subtrating the realised load from the genetic load
	
	fitness_indv=c(); // creates empty array to store individual fitness
	for(indv in pop.individuals){  // goes through each individual
		// Calculate individual fitness
		muts0_m2 = indv.genomes[0].mutations;  // obtains the mutations of each chromosome in each individuals
		muts1_m2 = indv.genomes[1].mutations;
		HOMO_m2=setIntersection(muts0_m2,muts1_m2);  // mutations cross referenced to determine whether they are homozoygous or heterozyoous
		HETERO_m2=setSymmetricDifference(muts0_m2,muts1_m2);
		if(length(HETERO_m2)>0){fit_hetero=1-(abs(HETERO_m2.selectionCoeff)*HETERO_m2.mutationType.dominanceCoeff);}
		if(length(HETERO_m2)==0){fit_hetero=1;}  // calculates the reduction in fitness contributed to by heteorzygous or homozygous mutations if any
		fit_homo=1-abs(HOMO_m2.selectionCoeff);
		if(length(fit_homo)==0){fit_homo=1;}
		indv_fit=product(c(fit_hetero,fit_homo)); // calculates the fitness of the individual by obtaining the product of the fitness deficit of the heterozygous and homozygous mutations
		fitness_indv=c(fitness_indv,indv_fit); // adds the individual's fitness to the array
	}
	
	fitness_cached=pop.cachedFitness(pop.individuals.index);
	heterozygosity=calcHeterozygosity(pop.genomes);
	
	
	out=sim.cycle +"\t"+ pop.id +"\t"+ indvCount +"\t"+ Mutcount +"\t"+ Pop_size +"\t"+ totalLoad +"\t"+ relzLoad +"\t"+ relzLoad_homo +"\t"+ relzLoad_hetero +"\t"+ mskLoad +"\t"+mean(fitness_indv)+"\t"+sd(fitness_indv)+"\t"+mean(fitness_cached)+"\t"+sd(fitness_cached)+"\t"+heterozygosity;
	return(out);
}

// Function to count shared mutations
function (lifso)countSharedMuts(lifso ind1, lifso ind2, lifso mutationTypes) {
	muts1 = c();
	muts2 = c();
	for (type in mutationTypes){
		muts1 = unique(c(muts1, ind1.genomes.positionsOfMutationsOfType(type))); // Retrieve deleterious mutations for individual 1
		muts2 = unique(c(muts2, ind2.genomes.positionsOfMutationsOfType(type))); // Retrieve deleterious mutations for individual 2
	}
	shared_count = 0; // Counting
	for (mut in muts1) {
		for (pos in muts2){
			if (mut == pos){
				shared_count = shared_count + 1;
				//cat("Match: " + mut + "\n"); // Print the matching positions
			}
		}
	}
	return shared_count;
}

// Create a population of 500 individuals
1 early() {
	sim.addSubpop("p1", 500);
}

// Import the burnin population
1 late() {
	sim.readFromPopulationFile("0_Data/" + "Burnin_" + NBurn + "n_" + runID + ".txt");
}

// Output population statistics and write them into a file
(NBurn + 1) early() {
	// Print headers for the population statistics
	writeFile("1_Outputs/6_Mixed_paper/" + Mating + "_" + NBurn + "burn_" + NGen + "gen_" + runID + "_popstats.txt", "Generation\t" + "PopulationID\t" + "SampleSize\t" + "UniqueMutations\t" + "PopulationSize\t" + "totalLoad\t" + "RelzLoad\t" + "RelzLoadHomo\t" + "RelzLoadHetero\t" + "MskLoad\t" + "MeanFitness\t" + "SdFitness\t" + "MeanFitnessCached\t" + "SdFitnessCached\t" + "Heterozygosity\t", append = F);
}

// Output population statistics and write them into a file
(NBurn + 1):(NBurn + NGen + 1) early() {
	// Print the calculated loads and the fitness	
	writeFile("1_Outputs/6_Mixed_paper/" + Mating + "_" + NBurn + "burn_" + NGen + "gen_" + runID + "_popstats.txt", getPopSumm(p1, 100), append = T);
}

// Add early event where we select the pairs of males and females (Genetic Load)
(NBurn+1): early() {
	inds = p1.individuals;
	// Subset males and females from the population
	fems = inds[inds.sex=="F"];
	mans = inds[inds.sex=="M"];
	p1.individuals.tag = 0; // Tag all individuals with a 0
	
	// Create groups of mothers and fathers
	mothers = c();
	fathers = c();
	
	// Initialize the previous candidates vector
	previous_candidates = c();
	brood_ids_fathers = asInteger(c());
	brood_ids_mothers = asInteger(c());
	
	
	// Select 20 breeding pairs
	while (size(mothers) < (round(MPrs*(2/3)))) {
		available_fems = c();
		available_mans = c();
		// Filter available females
		for (fem in fems){
			matching_ids_fem = setIntersection(fem.pedigreeParentIDs, brood_ids_mothers);
			if (size(matching_ids_fem) == 0){
				available_fems = c(available_fems, fem);
			}
		}
		// Select a mother from the pool of available females
		if (size(available_fems) > 0){
			mother = sample(available_fems, 1, replace = F);
		} else {
			cat("No female from a unique brood found. Sampling randomly.\n");
			mother = sample(fems, 1, replace = F); // If no mother from unique brood found, pick randomly
		}
		
		// Filtering males
		for (man in mans){
			matching_ids_man = setIntersection(man.pedigreeParentIDs, brood_ids_fathers);
			if (size(matching_ids_man) == 0) {
				available_mans = c(available_mans, man);
			}
		}
		
		// Initialize some state parameters and counters
		found_a_daddy = F;
		allowed_mutations = 1;
		
		
		// Retry loop: Keep increasing allowed_mutations until a mate is found
		while (!found_a_daddy) {
			// Check if an already sequenced male is adequate, providing there is at least 1
			if (size(previous_candidates) != 0) {
				// Go through the list of previous candidates
				for (potential_father in previous_candidates) {
					if (countSharedMuts(mother, potential_father, c(m2, m3)) <= allowed_mutations) {
						// Add the mating pair to the mothers and fathers vectors
						mothers = c(mothers, mother);
						fathers = c(fathers, potential_father);
						brood_ids_fathers = c(brood_ids_fathers, potential_father.pedigreeParentIDs);
						brood_ids_mothers = c(brood_ids_mothers, mother.pedigreeParentIDs);
						
						// Remove the mother and father from their respective pools of possible parents
						fems = fems[fems.index != mother.index];
						mans = mans[mans.index != potential_father.index];
						
						// Remove the now father from the list of previously unsuccessful candidates
						previous_candidates = previous_candidates[previous_candidates.index != potential_father.index];
						
						found_a_daddy = T;
						
						break;
					}
				}
			}
			
			if (found_a_daddy) {
				// Exit the retry loop if a mate has been found in the previous candidates
				break;
			}
			
			// Sequence a new potential father if no adequate mate has been found in the previous candidates
			if (size(available_mans) != 0){
				iteration_count = 0;
				while (T) {
					iteration_count = iteration_count + 1;
					if (iteration_count > 100) {
						break;
					}
					father = sample(available_mans, 1, replace = F);
					if (father.pedigreeParentIDs[1] != mother.pedigreeParentIDs[1]) {
						break;
					}
				}
			} else {
				iteration_count = 0;
				cat("No male from a unique brood found. Sampling randomly.\n");
				while (T) {
					iteration_count = iteration_count + 1;
					if (iteration_count > 100) {
						break;
					}
					father = sample(mans, 1, replace = F);
					if (father.pedigreeParentIDs[1] != mother.pedigreeParentIDs[1]) {
						break;
					}
				}
			}
			
			if (countSharedMuts(mother, father, c(m2, m3)) <= allowed_mutations) {
				// Add the mating pair to the mothers and fathers vectors
				mothers = c(mothers, mother);
				fathers = c(fathers, father);
				brood_ids_fathers = c(brood_ids_fathers, father.pedigreeParentIDs);
				brood_ids_mothers = c(brood_ids_mothers, mother.pedigreeParentIDs);
				
				// Remove the mother and father from their respective pools of possible parents
				fems = fems[fems.index != mother.index];
				mans = mans[mans.index != father.index];
				
				found_a_daddy = T;
				
				break;
			}
			
			// If no suitable father was found, add the potential father to previous_candidates
			previous_candidates = c(previous_candidates, father);
			
			// Increment allowed_mutations to allow more mismatches in the next iteration
			allowed_mutations = allowed_mutations + 1;
		}
	}
	
	
	
	// Add early event where we select the pairs of males and females (Relatedness)
	
	while (size(mothers) < MPrs) {
		//cat("Number of mating pairs :" + mating_pairs);
		//print(size(fems));
		available_fems = c();
		available_mans = c();
		
		// Select one female
		for (fem in fems){
			matching_ids_fem = setIntersection(fem.pedigreeParentIDs, brood_ids_mothers);
			if (size(matching_ids_fem) == 0){
				available_fems = c(available_fems, fem);
			}
		}
		
		// Filtering females
		if (size(available_fems) > 0){
			mother = sample(available_fems, 1, replace = F);
		} else {
			mother = sample(fems, 1, replace = F); // If no mother from unique brood found, pick randomly
		}
		brood_ids_mothers = c(brood_ids_mothers, mother.pedigreeParentIDs); // Update brood list for mothers
		fems = fems[fems.index != mother.index]; // Ensure removal from main pool		
		
		// Filtering males
		for (man in mans){
			matching_ids_man = setIntersection(man.pedigreeParentIDs, brood_ids_fathers);
			if (size(matching_ids_man) == 0) {
				available_mans = c(available_mans, man);
			}
		}
		
		// Selecting males	
		if (size(available_mans) != 0){
			iteration_count = 0;
			while (T) {
				iteration_count = iteration_count + 1;
				if (iteration_count > 100) {
					break;
				}
				father = sample(available_mans, 1, replace = F);
				if (father.pedigreeParentIDs[1] != mother.pedigreeParentIDs[1]) {
					break;
				}
			}
		} else {
			iteration_count = 0;
			while (T) {
				iteration_count = iteration_count + 1;
				if (iteration_count > 100) {
					break;
				}
				father = sample(mans, 1, replace = F);
				if (father.pedigreeParentIDs[1] != mother.pedigreeParentIDs[1]) {
					break;
				}
			}
		}
		
		// Populate the father brood IDs vector
		brood_ids_fathers = c(brood_ids_fathers, father.pedigreeParentIDs);
		mans = mans[mans.index != father.index]; // Ensure removal from main pool
		
		// Add the female to "mothers" and the male to the "fathers"
		mothers = c(mothers, mother);
		fathers = c(fathers, father);
	
	}
	// Tag mothers and fathers with unique numbers to ensure they remain in the correct order
	
	mothers.tag = c(1:MPrs);
	fathers.tag = c(1:MPrs);
	cat("Number of mating pairs: " + size(mothers) + ".\n");
}

// Mate-choice callback
(NBurn+1): mateChoice() {
	if (individual.tag == 0) {
		// If the female has no tag, return no mating probability
		return float(0);
	} else {
		// If the female has a tag, select the male with the same tag
		males = p1.individuals[p1.individuals.sex == "M"]; // Get all males
		matchingMale = males[males.tag == individual.tag];
		
		return(matchingMale[0]);
	}
}

// Output a population file at the end of the simulation
(NBurn + NGen + 1) late() {
	sim.outputFull("1_Outputs/6_Mixed_paper/" + Mating + "_" + NBurn + "burn_" + NGen + "gen_" + runID + ".txt", pedigreeIDs = T);
	sim.simulationFinished();
}
